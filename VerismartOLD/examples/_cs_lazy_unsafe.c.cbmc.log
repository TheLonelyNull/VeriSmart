CBMC version 5.12 (cbmc-5.12) 64-bit x86_64 linux
Parsing examples/_cs_lazy_unsafe.c
Converting
Type-checking _cs_lazy_unsafe
Generating GOTO Program
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Generic Property Instrumentation
Running with 8 object bits, 24 offset bits (default)
Starting Bounded Model Checking
size of program expression: 619 steps
simple slicing removed 182 assignments
Generated 13 VCC(s), 13 remaining after simplification
Passing problem to propositional reduction
converting SSA
Running propositional reduction
Post-processing
Solving with MiniSAT 2.2.1 with simplifier
1485 variables, 2694 clauses
SAT checker: instance is SATISFIABLE
Runtime decision procedure: 0.00404885s
Running propositional reduction
Solving with MiniSAT 2.2.1 with simplifier
1485 variables, 1305 clauses
SAT checker: instance is UNSATISFIABLE
Runtime decision procedure: 0.000157251s

** Results:
examples/_cs_lazy_unsafe.c function __cs_barrier_init
[__cs_barrier_init.assertion.1] line 182 count must be greater than 0: SUCCESS

examples/_cs_lazy_unsafe.c function __cs_barrier_wait_1
[__cs_barrier_wait_1.assertion.1] line 195 attempt to use an uninitialized barrier variable: SUCCESS

examples/_cs_lazy_unsafe.c function __cs_barrier_wait_2
[__cs_barrier_wait_2.assertion.1] line 201 attempt to use an uninitialized barrier variable: SUCCESS

examples/_cs_lazy_unsafe.c function __cs_cond_wait_1
[__cs_cond_wait_1.assertion.1] line 152 attempt to use an uninitialized conditional variable: SUCCESS
[__cs_cond_wait_1.assertion.2] line 153 attempt to use a destroyed conditional variable: SUCCESS

examples/_cs_lazy_unsafe.c function __cs_mutex_destroy
[__cs_mutex_destroy.assertion.1] line 114 attempt to destroy an uninitialized mutex: SUCCESS
[__cs_mutex_destroy.assertion.2] line 115 attempt to destroy a previously destroyed mutex: SUCCESS
[__cs_mutex_destroy.assertion.3] line 116 attempt to destroy a locked mutex: SUCCESS

examples/_cs_lazy_unsafe.c function __cs_mutex_lock
[__cs_mutex_lock.assertion.1] line 123 attempt to lock an uninitialized mutex: SUCCESS
[__cs_mutex_lock.assertion.2] line 124 attempt to lock a destroyed mutex: SUCCESS

examples/_cs_lazy_unsafe.c function __cs_mutex_unlock
[__cs_mutex_unlock.assertion.1] line 132 attempt to unlock an uninitialized mutex: SUCCESS
[__cs_mutex_unlock.assertion.2] line 133 attempt to unlock a destroyed mutex: SUCCESS

examples/_cs_lazy_unsafe.c function thread3_0
[thread3_0.assertion.1] line 327 assertion 0: FAILURE

** 1 of 13 failed (2 iterations)
VERIFICATION FAILED
